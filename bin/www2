#!/usr/bin/env node

var express       = require('express');
var path          = require('path');
var favicon       = require('serve-favicon');
var logger        = require('morgan');
var cookieParser  = require('cookie-parser');
var bodyParser    = require('body-parser');
var router        = express.Router();

//var routes = require('./routes/index');
//var users = require('./routes/users');

var app = express();

// view engine setup
app.set('views', path.join(__dirname, '..', 'views'));
app.set('view engine', 'jade');

// uncomment after placing your favicon in /public
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, '..', 'public')));

/*
// START
app.use('/', router);
router.get('/session/:id', function(req, res, next){
  res.send('first message');
  console.log('yo');
});*/
//app.use('/', routes);
app.get('/', function(req, res){
  console.log ('let app.use do it')
  console.log ('create session')
  var session = Math.floor( Math.random() * 10000 )
  res.redirect( '/' + session )
})

app.get('/:id([0-9]+)', function(req, res){
  loadHome(req, res)
})
//app.use('/users', users);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  //console.log('error :(');
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handlers

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
      message: err.message,
      error: err
    });
  });
}

// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {
  res.status(err.status || 500);
  res.render('error', {
    message: err.message,
    error: {}
  });
});

/**
 * Module dependencies.
 */

var debug = require('debug')('myapp:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


var express = require('express')
var router = express.Router()
var fs = require('fs')
//var mongo = require('mongodb').MongoClient;
var pg = require('pg')
// connect to the db
//mongo.connect("mongodb://localhost:")
/*pg.defaults.ssl = true;
pg.connect(process.env.DATABASE_URL, function(err, client){
  if (err) throw err;
  console.log('Connected to postgres! Getting schemas...');

  client.query('SELECT TA')
})*/
///////////////////////////////////////////////////////////////
//////////////////////      mongodb     ///////////////////////
///////////////////////////////////////////////////////////////

var mongoose = require('mongoose')
//var autoincrement = require('mongoose-auto-increment')
var Schema = mongoose.Schema;

var dbuser = 'ccc'
var dbpassword = '414proj'
var uri_string = process.env.MONGOLAB_URI || ('mongodb://'+dbuser+':'+dbpassword+'@ds019482.mlab.com:19482/414proj')
var conn = mongoose.createConnection ( uri_string )

//autoincrement.initialize(conn)

conn.on('error', function(err) {
  console.log("Connection error: " + err);
});

process.on('SIGHT', function (){
  mongoose.connection.close(function (){
    console.log('Mongoose default connection '+'disconnected through app termination.');
  process.exit(0);
  });
});

// schema
var RecordSchema = new Schema({
  session:  { type: Number, required: true },
  level:  { type: Number, required: true },
  type:  { type: String, required: true },
  codes: { type: String }
},{
  collection : 'records'
});

// generate model
var RecordModel = conn.model('record', RecordSchema)

// data initialization
conn.once('open', function () {
  console.log("Connection to sanddb is open...")
  // clear tables
  //RecordModel.remove({},function(){console.log("old playlist removed.")});
});

///////////////////////////////////////////////////////////////
//////////////////////////   other    /////////////////////////
///////////////////////////////////////////////////////////////

// socket.io connection

/*
router.get('/session/:id', function(req, res, next) {
  console.log('given session, let\'s see...')
  
});

router.get('/', function(req, res, next) {
  //res.render('index', { title: 'Express' });
  console.log('let router do this')
  loadHome(req, res, next);
  console.log('create new session!')
});
*/
function loadHome(req, res){
  console.log("loading home!!!!")
  fs.readFile('./index.html', function(err, html){
    if (err){
      throw err;
    }
    res.writeHeader(200, {"Content-Type": "text/html"});
    res.write(html);
    res.end();
  });
}


var io = require( 'socket.io' )( server );

io.on( 'connection', function( socket ) {
  var id;
  console.log( 'New user connected' );

  socket.on( 'disconnect', function() {
  console.log('User disconnected')
  });

  socket.on( 'register', function(data){
    console.log( 'User registered. session ID:', data)
    id = data
    socket.join(data)
  });

  socket.on( 'addVideo', function( data ){
    console.log( 'receive message: ', data )
    // store data
    var record = new RecordModel({
      session: id,
      level: data.level,
      type: data.type,
      codes: data.codes
    })
    var upsertData = record.toObject()
    delete upsertData._id
    RecordModel.update(
      {session: id, 
        level: data.level,
        type: data.type
      },
      upsertData,
      {upsert: true},
      function(err){
        if (err)
          return console.error(err); 
      }
    )
  });

  socket.on( 'download', function ( data ){
    //console.log('download request received, session:', data)
    RecordModel.find( {'session': id, 'level': data} ).exec(function(err, results){
      socket.emit('download', results)
    })

  });
  socket.on('download_random', function (data) {
    RecordModel.find( {'session': {$ne: id}, 'level': data}).exec(function(err, results){
    console.log("checking download_random");
      socket.emit('download_random', results)
    })
  });

});